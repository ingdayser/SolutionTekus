// <auto-generated />

namespace Tekus.Core
{
	using System.CodeDom.Compiler;
	using System.Globalization;
	using System.Resources;
	using System.Reflection;
	using System.Threading;
	using System;

	// <summary>
	// Strongly-typed and parameterized string resources.
	// </summary>
	[GeneratedCode("Resources.tt", "1.0.0.0")]
	internal static class Strings
	{
		// <summary>
		// A string like "/all?fields=name,numericCode,cioc"
		// </summary>
		internal static string Url_AllCountries
		{
			get { return EntityRes.GetString(EntityRes.Url_AllCountries); }
		}

		// <summary>
		// A string like "/alpha?codes={0}&fields=name,numericCode,cioc"
		// </summary>
		internal static string Url_CountryByCioc(object p0)
		{
			return EntityRes.GetString(EntityRes.Url_CountryByCioc, p0);
		}
	}

	// <summary>
	// Strongly-typed and parameterized exception factory.
	// </summary>
	[GeneratedCode("Resources.tt", "1.0.0.0")]
	internal static class Error
	{
		// <summary>
		// The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
		// </summary>
		internal static System.Exception ArgumentOutOfRange(string paramName)
		{
			return new ArgumentOutOfRangeException(paramName);
		}

		// <summary>
		// The exception that is thrown when the author has yet to implement the logic at this point in the program. This can act as an exception based TODO tag.
		// </summary>
		internal static System.Exception NotImplemented()
		{
			return new NotImplementedException();
		}

		// <summary>
		// The exception that is thrown when an invoked method is not supported, or when there is an attempt to
		// read, seek, or write to a stream that does not support the invoked functionality.
		// </summary>
		internal static System.Exception NotSupported()
		{
			return new NotSupportedException();
		}
	}

	// <summary>
	// AutoGenerated resource class. Usage:
	// string s = EntityRes.GetString(EntityRes.MyIdenfitier);
	// </summary>
	[GeneratedCode("Resources.tt", "1.0.0.0")]
	internal sealed class EntityRes
	{
        internal const string Url_AllCountries = "Url_AllCountries";
        internal const string Url_CountryByCioc = "Url_CountryByCioc";

		private static EntityRes loader;
		private readonly ResourceManager resources;

		private EntityRes()
		{
			resources = new ResourceManager("Tekus.Core.Domain.Properties.Resources",Assembly.GetExecutingAssembly());
		}

		private static EntityRes GetLoader()
		{
			if (loader == null)
			{
				var sr = new EntityRes();
				Interlocked.CompareExchange(ref loader, sr, null);
			}
			return loader;
		}

		private static CultureInfo Culture
		{
			get { return CultureInfo.CurrentUICulture; }
		}

		public static ResourceManager Resources
		{
			get { return GetLoader().resources; }
		}

		public static string GetString(string name, params object[] args)
		{
			var sys = GetLoader();
			if (sys == null)
			{
				return null;
			}

			var res = sys.resources.GetString(name, Culture);

			if (args != null
				&& args.Length > 0)
			{
				for (var i = 0; i < args.Length; i ++)
				{
					var value = args[i] as String;
					if (value != null
						&& value.Length > 1024)
					{
						args[i] = value.Substring(0, 1024 - 3) + "...";
					}
				}
				return String.Format(CultureInfo.CurrentCulture, res, args);
			}
			else
			{
				return res;
			}
		}

		public static string GetString(string name)
		{
			var sys = GetLoader();
			if (sys == null)
			{
				return null;
			}
			return sys.resources.GetString(name, Culture);
		}

		public static string GetString(string name, out bool usedFallback)
		{
			// always false for this version of gensr
			usedFallback = false;
			return GetString(name);
		}

		public static object GetObject(string name)
		{
			var sys = GetLoader();
			if (sys == null)
			{
				return null;
			}
			return sys.resources.GetObject(name, Culture);
		}
	}
}
